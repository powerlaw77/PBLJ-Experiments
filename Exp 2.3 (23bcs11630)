//Part (a): Sorting Employee Objects Using Lambda Expressions

import java.util.*;
class Employee {
    String name;
    int age;
    double salary;

    Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    public String toString() {
        return name + " | Age: " + age + " | Salary: " + salary;
    }
}

public class SortEmployees {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Tushar", 24, 55000));
        employees.add(new Employee("Aarav", 22, 60000));
        employees.add(new Employee("Bhavya", 25, 50000));

        System.out.println("Original List:");
        employees.forEach(System.out::println);

        // Sort by name (alphabetically)
        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("\nSorted by Name:");
        employees.forEach(System.out::println);

        // Sort by age (ascending)
        employees.sort((e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("\nSorted by Age:");
        employees.forEach(System.out::println);

        // Sort by salary (descending)
        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("\nSorted by Salary (Descending):");
        employees.forEach(System.out::println);
    }
}


//Part (b): Filtering and Sorting Students Using Streams

import java.util.*;
import java.util.stream.*;

class Student {
    String name;
    double marks;

    Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    public String toString() {
        return name + " | Marks: " + marks;
    }
}

public class FilterStudents {
    public static void main(String[] args) {
        List<Student> students = Arrays.asList(
                new Student("Tushar", 92),
                new Student("Aditi", 70),
                new Student("Rahul", 85),
                new Student("Kavya", 78),
                new Student("Mehul", 65)
        );

        System.out.println("Students scoring above 75% (sorted by marks):");

        students.stream()
                .filter(s -> s.marks > 75)
                .sorted((s1, s2) -> Double.compare(s2.marks, s1.marks)) // descending
                .map(s -> s.name) // extract names only
                .forEach(System.out::println);
    }
}

//Part (c): Stream Operations on Product Dataset

import java.util.*;
import java.util.stream.*;
import java.util.Map.Entry;

class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String toString() {
        return name + " | " + category + " | " + price;
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
                new Product("Laptop", 80000, "Electronics"),
                new Product("Headphones", 2000, "Electronics"),
                new Product("Chair", 3000, "Furniture"),
                new Product("Table", 7000, "Furniture"),
                new Product("Shirt", 1500, "Clothing"),
                new Product("Jeans", 2000, "Clothing")
        );
        Map<String, List<Product>> groupedByCategory =
                products.stream().collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Products Grouped by Category:");
        groupedByCategory.forEach((cat, list) -> {
            System.out.println(cat + " -> " + list);
        });
        Map<String, Optional<Product>> maxByCategory =
                products.stream().collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        System.out.println("\nMost Expensive Product in Each Category:");
        maxByCategory.forEach((cat, prod) ->
                System.out.println(cat + " -> " + prod.orElse(null))
        );
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage Price of All Products: " + avgPrice);
    }
}
